JDBC
	- Java Database Connectivity
		- establish a connection between a Java application and a database
			- dependency is database specific
	- Important JDBC classes/interfaces
		- DriverManager (C)
			- manage the JDBC driver
			- .getConnection()
				- provide a connection to the db
					- hardcoded (bad practice)
					- property file (prevent from pushing to GitHub using .gitignore)
					- environment variables
		- Connection (I)
			- represents the connection to the database
			- .setAutoCommit(boolean)
			- createStatement()/PreparedStatement()
			- commit()/rollback()
			- close()
		- Statement (I)
			- represents a SQL statement
			- .executeQuery(sql)
			- vulnerable to SQL injection
				- best used when no user input is required
		- PreparedStatement (I)
			- represents a SQL statement
				- that has been pre-processed and therefore prevents SQL injections
			- have to setFields for user inputs
		- ResultSet
			- result of a Query
	- SQL Injection
		- placing malicious code into a sql statement
			- ie: "select * from employees where = [userInput];
				- input could be "0; drop table employees;"
			

Joins
	- way to combine rows from different tables based on some logical relationship (columns)
		- inner join/join: return all the records that have matching values in both tables
		- left (outer) join: return all records from the left table and matched records from the right table
		- right (outer) join: return all records from the right table and matched records from the left table
		- full (outer) join: return all records when there is a match in either left or right table
		- self join: join a table with itself to combine related data from the same table

	- ie: https://www.postgresql.org/docs/10/tutorial-join.html