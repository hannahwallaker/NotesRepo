Scalar and aggregate functions
	- scalar functions
		- used on a single input to retrieve a single output
		- length, upper, lower, round...
	- aggregate functions
		- used on a group of inputs to retrieve a single output
		- count, avg, sum, max, min
		- GROUP BY
			- used with aggregate functions
			- select [col1], [aggregateFunction]([col2]) from [table_name] group by [col1];
		- HAVING
			- used with aggregate function for more specificity
			- select [col1], [aggregateFunction]([col2]) from [table_name] group by [col1]
				having [col2] > [x];

Normalization
	- refers to a database design technique that reduces redundancy and ensures that data is stored logically
	- consists in dividing larger tables into smaller tables and linking them using relationships
		- we're focus on the first 3 NFs (normal forms)
			- most databases are considered to be sufficiently normalized after 3 NFs
		- 1 NF
			- each table needs to have a primary key
			- tables need to be comprised of atomic values
				- values that cannot be broken down into smaller pieces
			- no repeated columns (or columns for the same purpose)
				- ie: color 1, color 2, ...
		- 2 NF
			- must have 1 NF
			- no partial dependencies
				- removing values that only depends on one part of the composite key
		- 3 NF 
			- must have 2 NF
			- no transitive dependency
				- field/column that can be derived based on other fields

						
					SaleStaff
EmployeeId | SalePersonName | SalesOffice (street, city, state, zip) | Age | DOB | Customer1 | Customer2 | Customer3

TCL
	- Transaction Control Language
		- Transaction
			- consists in combining multiple database operations into one unit of work
			- PostgreSQL treats every SQL statement as being executed within a transaction unless specified otherwise
		- Relevant statements
			- begin
				- can indicate the start of a transaction
					- if begin is not used, one can be implicitely provided
				- start of transaction block
					- statement(s) to be executed as a unit of work
					- between begin and commit
			- savepoint
				- saves the state of the database at that point within the transaction
			- rollback [savepoint]
				- reverts the state of a database to a previous commit or savepoint
			- commit
				- saves/persists the changes to a database

	- https://www.postgresql.org/docs/10/tutorial-transactions.html

	- Properties of a transaction - ACID
		- Atomicity
			- one unit, transaction should be completed as a whole or not at all
		- Consistency
			- database should be in a valid state before/after the transaction
				- valid in regards to db constraint
				- valid in regards to business logic
		- Isolation
			- one transaction should not interfere with another transaction
			- results of transactions executing concurrently should be the be the same as if they occured in sequence
		- Durability
			- Commits are final, changes should be persisted to the database
	
	- Transaction Isolation Levels
		- Read uncommited
			- able to read/interact with uncommited data
		- Read commited
			- only able to interact with commited data
		- Repeatable read
			- only see data commited before the transaction began
		- Serializable
			- strictest level of isolation
			- transactions have to occur sequentially
	- Read phenomema
		- Dirty read (can arise from read uncommited isolation level)
			- transaction is able to read data written in a concurrent uncommited transaction
		- Non repeatable read
			- a transaction re-reads data it has previously read and finds that the data has been modified by another transaction
		- Phantom read
			- transaction re-execute a query and returns a set of row to find out that the set has been modified by another transaction































