Java resources:
	- https://docs.oracle.com/javase/tutorial/java/index.html
	- https://www.tutorialspoint.com/java/index.htm
	- https://docs.oracle.com/javase/8/docs/api/index.html

Groups: (Come up with a team name)
Tricia
Hannah
Bezza
Andrew

Jeremy
Kendrick
Brayden
Gerardo

Sam
Patience
Bruno
Alex

Albert
Tevon
Dean
Andre

Kim
Davey
David
Peter
Malolan

String
	- reference type, array of characters
	- String is a class, the strings that we're working with are instances of that class
	- immutable - cannot be changed, value of a string remains the same (final keyword)
	- Strings are usually stored in the String pool (in the heap)
		- where all strings instantiated literally (ie: String s = "Hello";) are stored
		- this allows Java to reuse the save String for repeated valued strings
	- String newS = new String("Hello"); //Creates the string in the heap itself instead of in the String Pool
	- String s = "Hello"; //Creates the string in the String Pool, can be reused
	- interning
		- .intern() method - checks if a String is already in the String Pool and if it exists returns a reference to it,
			else creates that string and returns that reference

StringBuilder/ StringBuffer
	- mutable alternatives to Strings with methods that allow for manipulation
		- append, replace...
	- StringBuilder is not thread-safe - faster
	- StringBuffer is thread-safe - slower

Scanner
	- https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html
	- Class in java that can be used to "scan" through several things
		- files, console inputs, input streams
	- can parse through inputs for different types, read an entire line... etc.
	- Recommendation: use one scanner per input stream 
	- Good practice: close resources when no longer needed

OOP
	- Programming paradigm which relies on classes and objects to model real world objects
	- 4 pillars of OOP
		- Encapsulation
		- Inheritance
		- Polymorphism
		- Abstraction

Class
	- Blueprint for an object, define their states and behaviors
	- Members of a class
		- variables and methods of that class
			- Object/Instance
				- Instance variables
				- Instance methods
			- Class/Doesn't belong to a specific object
				- Static variables
				- Static methods

Object
	- Instance of a class
		- can be created using the "new" keyword
			- ClassName varName = new ClassName();// invokes the no-args constructor for ClassName
			- ClassName varName = new ClassName(someVar);// invokes the parameterized constructor for ClassName
	- Beware of the Object class
		- Parent of all classes
			- contains methods such:
				- toString() - override to return a String representation of an object
				- equals(...) - override to actually compare the fields of the instances

Encapsulation
	- refers to the ability for an object to protect its states and its behaviors
	- can be achieved by defining accessibility of classmembers using access modifiers
		- setting variables to private
	- using setters and getters to retrieve/change the states of an object

Access modifiers
	- specify which classes have access to a class and its members
		- DO NOT CONFUSE WITH SCOPES
		- public - least restrictive, all the classes within the application have access
		- protected - all of the classes within the package and all of the sub/child classes have access
		- "default"/none (none is defined, if left blank) - all of the classes within the package have access
			- NOTE: THE DEFAULT KEYWORD IS USED FOR SOMETHING ELSE 
		- private - the most restrictive, only the class itself has access

Create Task.class
	- String name
	- LocalDate dueDate
	- encapsulate the class
	- create setter and getter
		- manually write at least one of them
	- give a toString() and a .equals() method